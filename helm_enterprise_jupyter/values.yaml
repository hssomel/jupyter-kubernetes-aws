custom: {}

hub:
  service:
    type: ClusterIP
    annotations: {}
    ports:
      nodePort:
    loadBalancerIP:
  baseUrl: /
  cookieSecret:
  publicURL:
  uid: 1000
  fsGid: 1000
  nodeSelector: {}
  concurrentSpawnLimit: 64
  consecutiveFailureLimit: 5
  activeServerLimit:
  deploymentStrategy:
    # sqlite-pvc backed hub requires Recreate strategy to work
    type: Recreate
    # This is required for upgrading to work
    rollingUpdate:
  db:
    type: sqlite-pvc
    upgrade:
    pvc:
      annotations: {}
      selector: {}
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      subPath:
      storageClassName:
    url:
    password:
  labels: {}
  annotations: {}
  extraConfig: 
    jupyter_notebook_config.py: |
      config = '/etc/jupyter/jupyter_notebook_config.py'
  extraConfigMap: {}
  extraEnv: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  image:
    name: jupyterhub/k8s-hub
    tag: '0.8.2'
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
  services: {}
  imagePullPolicy: IfNotPresent
  imagePullSecret:
    enabled: false
    registry:
    username:
    email:
    password:
  pdb:
    enabled: true
    minAvailable: 1
  networkPolicy:
    enabled: false
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
  allowNamedServers: false


rbac:
  enabled: true


proxy:
  secretToken: '146035d913a807595b6a16f445f47096e055535c155392f1c0ef37199714e482'
  service:
    type: LoadBalancer
    labels: {}
    annotations: {}
    nodePorts:
      http:
      https:
    loadBalancerIP:
  chp:
    image:
      name: jupyterhub/configurable-http-proxy
      tag: 3.0.0
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
  nginx:
    image:
      name: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
      tag: 0.15.0
      pullPolicy: IfNotPresent
    proxyBodySize: 64m
    resources: {}
  lego:
    image:
      name: jetstack/kube-lego
      tag: 0.1.7
      pullPolicy: IfNotPresent
    resources: {}
  labels: {}
  nodeSelector: {}
  pdb:
    enabled: true
    minAvailable: 1
  https:
    enabled: true
    type: letsencrypt
    #type: letsencrypt, manual, offload, secret
    letsencrypt:
      contactEmail: ''
    manual:
      key:
      cert:
    secret:
      name: ''
      key: tls.key
      crt: tls.crt
    hosts: []
  networkPolicy:
    enabled: false
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0


auth:
  type: dummy
  whitelist:
    users:
  admin:
    access: true
    users:
  dummy:
    password:
  ldap:
    dn:
      search: {}
      user: {}
    user: {}
  state:
    enabled: false
    cryptoKey:


singleuser:
  extraTolerations: []
  nodeSelector: {}
  extraNodeAffinity:
    required: []
    preferred: []
  extraPodAffinity:
    required: []
    preferred: []
  extraPodAntiAffinity:
    required: []
    preferred: []
  networkTools:
    image:
      name: jupyterhub/k8s-network-tools
      tag: '0.8.2'
  cloudMetadata:
    enabled: false
    ip: 169.254.169.254
  networkPolicy:
    enabled: false
    egress:
    # Required egress is handled by other rules so it's safe to modify this
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
                - 169.254.169.254/32
  events: true
  extraAnnotations: {}
  extraLabels:
    hub.jupyter.org/network-access-hub: 'true'
  extraEnv: 
    # Kubernetes internal DNS for services:
    # <svc-name>.<namespace>.svc.cluster.local
    KG_URL: "http://enterprise-gateway.harpreet.svc.cluster.local:8888"
    # KG_HTTP_USER: "{username}"
    # KERNEL_USERNAME: "{username}"
    KG_REQUEST_TIMEOUT: "60" 
  lifecycleHooks:
  initContainers: []
  extraContainers: []
  uid: 1000
  fsGid: 100
  serviceAccountName:
  storage:
    type: dynamic
    extraLabels: {}
    extraVolumes: []
    extraVolumeMounts: []
    static:
      pvcName:
      subPath: '{username}'
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      storageClass:
      pvcNameTemplate: claim-{username}{servername}
      volumeNameTemplate: volume-{username}{servername}
      storageAccessModes: [ReadWriteOnce]
  image:
    # name: jupyterhub/k8s-singleuser-sample
    tag: '0.8.2'
    name: gurkamal/jupyter-k8s-single-user-for-enterprise-gateway
    pullPolicy: IfNotPresent
  imagePullSecret:
    enabled: false
    registry:
    username:
    email:
    password:
  startTimeout: 300
  cpu:
    limit:
    guarantee:
  memory:
    limit:
    guarantee: 1G
  extraResource:
    limits: {}
    guarantees: {}
  cmd: jupyterhub-singleuser
  defaultUrl:


scheduling:
  userScheduler:
    enabled: false
    replicas: 1
    logLevel: 4
    image:
      name: gcr.io/google_containers/kube-scheduler-amd64
      tag: v1.11.2
    nodeSelector: {}
    pdb:
      enabled: true
      minAvailable: 1
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
  podPriority:
    enabled: false
    globalDefault: false
    defaultPriority: 0
    userPlaceholderPriority: -10
  userPlaceholder:
    enabled: true
    replicas: 0
  corePods:
    nodeAffinity:
      matchNodePurpose: prefer
  userPods:
    nodeAffinity:
      matchNodePurpose: prefer


prePuller:
  hook:
    enabled: true
    image:
      name: jupyterhub/k8s-image-awaiter
      tag: '0.8.2'
  continuous:
    enabled: false
  extraImages: {}
  pause:
    image:
      name: gcr.io/google_containers/pause
      tag: '3.0'


ingress:
  enabled: false
  annotations: {}
  hosts: []
  pathSuffix: ''
  tls: []


cull:
  enabled: true
  users: false
  timeout: 3600
  every: 600
  concurrency: 10
  maxAge: 0


debug:
  enabled: false
# Enterprise Gateway image name and tag to use.
image: elyra/enterprise-gateway:2.0.0
# Enterprise Gateway image pull policy.
imagePullPolicy: IfNotPresent
# The primary port on which Enterprise Gateway is servicing requests.
port: 8888
# Update to deploy multiple replicas of EG.
replicas: 1
# Log output level.
logLevel: DEBUG
# Whether to mirror working directories.
mirrorWorkingDirs: false
# Master public IP on which to expose EG.
k8sMasterPublicIP:

kernel:
  # Kernel cluster role created by this chart.
  clusterRole: kernel-controller
  # Will start kernels in the same namespace as EG if True.
  shareGatewayNamespace: false
  # Timeout for kernel launching in seconds.
  launchTimeout: 60
  # Timeout for an idle kernel before its culled in seconds. Default is 1 hour.
  cullIdleTimeout: 3600
  # List of kernel names that are available for use.
  whitelist:
    - r_kubernetes
    - python_kubernetes
    - python_tf_kubernetes
    - python_tf_gpu_kubernetes
    - scala_kubernetes
    - spark_r_kubernetes
    - spark_python_kubernetes
    - spark_scala_kubernetes

kernelspecs:
  # Optional custom data image containing kernelspecs to use.
  image:
  # Kernelspecs image pull policy.
  imagePullPolicy: Always

nfs:
  enabled: false
  # IP address of NFS server. Required if enabled.
  internalServerIPAddress:

ingress:
  enabled: false

  # Ingress resource host
  hostName: ""

  # Ingress resource annotations to be included depending in ingress controller.
  traefik:
    enabled: true
    path: /gateway
    annotations:
      kubernetes.io/ingress.class: "traefik"
      traefik.frontend.rule.type: PathPrefixStrip

  nginx:
    enabled: false
    path: /gateway/?(.*)
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"

# Kernel Image Puller (daemonset)
kip:
  enabled: true
  # Kernel Image Puller image name and tag to use.
  image: elyra/kernel-image-puller:2.0.0
  # Kernel Image Puller image pull policy.
  imagePullPolicy: IfNotPresent
  # Determines whether the Kernel Image Puller will pull kernel images it has previously pulled
  pullPolicy: IfNotPresent
  # The interval (in seconds) at which the Kernel Image Puller fetches kernelspecs to pull kernel images.
  interval: 300


